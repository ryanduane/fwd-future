{"version":3,"sources":["Pastiche.js","serviceWorker.js","index.js","Pastiche.module.scss"],"names":["ROTATION","COLORS","Pastiche","props","updateWindowDimensions","setState","width","window","innerWidth","height","innerHeight","getRandomIntInclusive","min","max","Math","ceil","floor","random","loadImageFlickr","quote","index","a","params","method","api_key","text","format","nojsoncallback","per_page","ky","get","searchParams","json","result","photos","photo","Array","isArray","length","console","log","flickrImages","map","image","farm","server","id","secret","title","color","url","state","images","concat","error","loadImageWikipedia","action","list","aifrom","ailimit","safe_search","query","allimages","loadImages","quotes","placeImage","maxScreenWidth","maxScreenHeight","leftEdge","topEdge","quoteList","this","split","addEventListener","removeEventListener","className","styles","app","appImageContainer","rotation","appImageDiv","key","style","left","top","transform","border","shadow","alt","appImage","src","appQuote","quoteDelim","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message","module","exports"],"mappings":"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","file":"static/js/main.ce02468b.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport ky from 'ky';\nimport styles from './Pastiche.module.scss';\n\nconst ROTATION = [\n  'rotate(0deg)',\n  'rotate(0deg)',\n  'rotate(23deg)',\n  'rotate(45deg)',\n  'rotate(-23deg)',\n  'rotate(-45deg)',\n]\n\nconst COLORS = [\n  '#150af0',\n  '#f07d0a',\n  '#009416',\n  '#b0050e',\n  '#595259',\n]\n\nexport class Pastiche extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      quote: 'Itâ€™s not too late / To feel a little more alive / Make our escape / Before we start to vaporize',\n      images: [],\n      width: 0,\n      height: 0,\n    };\n  }\n\n  componentDidMount() {\n    const { quote } = this.state;\n    const quoteList = quote.split(/\\s*(?:[;,.//]|$)\\s*/);\n    this.setState({ quoteList })\n    this.loadImages(quoteList);\n    this.updateWindowDimensions();\n    window.addEventListener('resize', this.updateWindowDimensions);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.updateWindowDimensions);\n  }\n\n  updateWindowDimensions = () => {\n    this.setState({ width: window.innerWidth, height: window.innerHeight });\n  }\n\n  getRandomIntInclusive = (min, max) => {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min + 1)) + min; //The maximum is inclusive and the minimum is inclusive \n  }\n\n  loadImageFlickr = async (quote, index) => {\n    // https://www.flickr.com/services/api/flickr.photos.search.html\n    // https://www.flickr.com/services/rest/?method=flickr.photos.search&api_key=6c1975a4b22f8f362e5ea3f7faa4bab7&text=Love&format=json&nojsoncallback=1\n    try {\n      const proxyUrl = 'https://cors-anywhere.herokuapp.com/';\n      const targetUrl = 'https://www.flickr.com/services/rest/';\n      const params = {\n        method: 'flickr.photos.search',\n        api_key: '6c1975a4b22f8f362e5ea3f7faa4bab7',\n        text: quote,\n        format: 'json',\n        nojsoncallback: '1',\n        per_page: '20',\n      }\n      const result = await ky\n        .get(\n          `${proxyUrl}${targetUrl}`,\n          {\n            searchParams: params,\n          },\n        )\n        .json();\n      const { photos } = result || {};\n      const { photo } = photos || {};\n      if (Array.isArray(photo) && photo.length > 0) {\n        console.log('photo', photo);\n        // https://farm66.staticflickr.com/65535/49777624108_f8e6e4c982.jpg\n        const flickrImages = photo.map((image) => {\n          const { farm, server, id, secret, title } = image;\n          return {\n            title,\n            color: COLORS[index],\n            url: `https://farm${farm}.staticflickr.com/${server}/${id}_${secret}.jpg`,\n          }\n        })\n        const { images = [] } = this.state;\n        this.setState({\n          images: images.concat(flickrImages),\n        });\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  loadImageWikipedia = async (quote) => {\n    // https://en.wikipedia.org/w/api.php?action=query&format=json&list=allimages&aifrom=Graffiti_000&ailimit=3\n    try {\n      const proxyUrl = 'https://cors-anywhere.herokuapp.com/';\n      const targetUrl = 'https://en.wikipedia.org/w/api.php';\n      const params = {\n        action: 'query',\n        format: 'json',\n        list: 'allimages',\n        aifrom: quote,\n        ailimit: 20,\n        safe_search : 1,\n      }\n      const result = await ky\n        .get(\n          `${proxyUrl}${targetUrl}`,\n          {\n            searchParams: params,\n          },\n        )\n        .json();\n      const { query } = result || {};\n      const { allimages } = query || {};\n      if (Array.isArray(allimages) && allimages.length > 0) {\n        console.log('allimages', allimages);\n        const { images = [] } = this.state;\n        this.setState({\n          images: images.concat(allimages),\n        });\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  loadImages = (quotes) => {\n    quotes.map((quote, index) => {\n      // if (quote) this.loadImageWikipedia(quote);\n      if (quote) this.loadImageFlickr(quote, index);\n      return null;\n    });\n  }\n\n  placeImage = () => {\n    const { width, height } = this.state;\n    const maxScreenWidth = width - 200;\n    const maxScreenHeight = height - 200;\n    const leftEdge = maxScreenWidth * Math.random();\n    const topEdge = maxScreenHeight * Math.random();\n\n    switch (this.getRandomIntInclusive(1, 6)) {\n      case 1: // left\n        return { leftEdge: 0, topEdge };\n      case 2: // top\n      case 3:\n        return { leftEdge, topEdge: 0 };\n      case 4: // right\n        return { leftEdge: maxScreenWidth, topEdge };\n      case 5: // bottom\n      case 6:\n        return { leftEdge, topEdge: maxScreenHeight };\n      default:\n        return { leftEdge, topEdge };\n    }\n\n  }\n\n  render() {\n    const { images, quoteList = [] } = this.state;\n    return (\n      <div className={styles.app}>\n        <div className={styles.appImageContainer}>\n          {images.map((image, index) => {\n            const { title, url, color } = image || {};\n            const { leftEdge, topEdge } = this.placeImage();\n            const rotation = ROTATION[this.getRandomIntInclusive(0, 5)];\n            return (\n              <div\n                className={styles.appImageDiv}\n                key={index}\n                style={{\n                  left: leftEdge,\n                  top: topEdge,\n                  transform: rotation,\n                }}\n              >\n                <div style={{ border: `5px solid ${color}` }} className={styles.shadow}>\n                  <img\n                    alt={title}\n                    className={styles.appImage}\n                    src={url}\n                  />\n                </div>\n              </div>\n            )\n          })}\n        </div>\n        <div className={styles.appQuote}>\n          <p>\n            {quoteList.map((quote, index) => {\n              const quoteDelim = (index < quoteList.length - 1) \n                ? `${quote} / `\n                : quote;\n              return (\n              <span style={{ color: COLORS[index] }} className={styles.quote}>{quoteDelim}</span>\n              )\n            })}\n          </p>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Pastiche;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Pastiche from './Pastiche';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Pastiche />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"Pastiche_app__3u_s1\",\"appQuote\":\"Pastiche_appQuote__2D0gY\",\"appImageContainer\":\"Pastiche_appImageContainer__3203X\",\"appImageDiv\":\"Pastiche_appImageDiv__JYaHp\",\"shadow\":\"Pastiche_shadow__2i0UN\",\"appImage\":\"Pastiche_appImage__s6oEZ\",\"quote\":\"Pastiche_quote__d6rRi\"};"],"sourceRoot":""}